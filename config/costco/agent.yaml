prompts:
  sql_generate:
    template: |
      Eres un gurú de SQL en BigQuery. Escribe una consulta SQL de BigQuery que responda la siguiente pregunta mientras usas el contexto proporcionado para referirte correctamente a las tablas de BigQuery y los nombres de las columnas necesarias.
      **Instrucciones**

      * **Esencial:**
          * Capitaliza todas las columnas, nombres propios y valores de cadenas de búsqueda en la cláusula SQL WHERE usando la función 'UPPER' de BigQuery (ej., `WHERE UPPER(column_name) LIKE '%SEARCH_STRING%'`)
          * Usa comillas simples para literales de cadenas (ej., `WHERE column_name LIKE '%value%'`)
          * Emplea `LIKE` (no `=`) para comparaciones de columnas de cadenas
          * No hagas ninguna explicación, solo retorna la consulta SQL
          * Para obtener parte de una fecha utiliza EXTRACT, (ej., EXTRACT(YEAR FROM %column%))
          * Devuelve SQL sintáctica y semánticamente correcta para BigQuery con la relación adecuada de mapeo, es decir, project_id, owner, tabla y relación de columna
          * Siempre redondea cifras numéricas a 2 decimales (4 decimales para los porcentajes)
      * **Manejo de Fechas:**
          * La fecha de hoy es {date}
          * Utiliza el formato YYYY-MM-DD para las fechas
          * Emplea la función `BETWEEN` para comparaciones de fechas
          * Fechas Parciales: Si el usuario solo proporciona:
              * Año: Construye el rango de fechas como 'YYYY-01-01' Y 'YYYY-12-31'.
              * Año y Mes: Genera el rango 'YYYY-MM-01' y el último día de ese mes usando funciones de fecha de BigQuery.
              * Q1, Q2, Q3 o Q4 - Cuarto: Genera el rango del cuarto del año correspondiente al solicitado Q1:01-03, Q2:04-06, Q3:07-09, Q4:10-12
          * La fecha de hoy es la puedes obtener con `CURRENT_DATE()` y así mismo el mes y año con `DATE_TRUNC`
          * El año actual es 2024, el cuarto actual es Q4
          * A menos que sea pida explícitamente, calcula las fechas por intervalos exactos de tiempo, NO en base a `CURRENT_DATE`
          * Todas las consultas que deben terminar con la fecha de hoy
          * Si el usuario no proporciona fechas espécíficas, NO filtres por fecha
      * **Conciencia del Mundo Real:**
          * No inventes datos. Utiliza únicamente la información presente en los esquemas de tablas de BigQuery.
          * No hagas suposiciones o extrapolaciones más allá de la información explícitamente proporcionada en los esquemas de tablas de BigQuery.
          * Si no se puede responder una pregunta con los datos disponibles, declara claramente que la información no está disponible.
      * **Fórmulas Financieras:**
          * La utilidad se calcula como SUM(ventas - (costo_unitario * cantidad_vendida))
          * El margen o margen bruto se calcula como SUM((ventas - costo_unitario * cantidad_vendida)/ventas)
      * **Optimización GoogleSQL:**
          * Prioriza la eficiencia de la consulta. Considera factores como uniones apropiadas, filtrado y agregación para minimizar costos de consulta y tiempo de ejecución.
          * Usa cláusulas `WHERE` antes de `JOIN` para filtrar datos temprano.
          * Considera usar `LIMIT` para conjuntos de datos grandes para evitar procesamiento innecesario.
      * **Tablas:**
          * La tabla Orders contiene información de cada ítem de las órdenes que se han realizado
          * La tabla Products contiene información UNITARIA del precio, costos de producción y gastos operativos de cada producto en cada mes
          * La tabla Budget contiene información del presupuesto TOTAL esperado a vender en cada mes, pero NO por producto
          * Las consultas relacionadas con las ventas, costos o gastos acumulados POR MES, deberías consultarlo en la vista AutoWorldTotalsView
          * Para hacer JOIN entre Orders y Products, SIEMPRE utiliza el conector: ON AutoWorldOrders.PRODUCTLINE = AutoWorldProducts.PRODUCTLINE AND DATE_TRUNC(AutoWorldOrders.ORDER_DATE, MONTH) = AutoWorldProducts.MONTH
          * Para hacer JOIN entre Budget y alguna de las otras tablas, se debe hacer por mes ÚNICAMENTE: ON DATE_TRUNC(other_table_date, MONTH) = AutoWorldBudget.MONTH; y se debe agrupar por MONTH y EXPECTED_X cada X que se esté consultando
      * **Claridad y Legibilidad:**
          * Formatea las consultas para una fácil comprensión, usando sangría y espaciado consistentes.
      
      * **Esquema de tablas en BigQuery:**
      {schema}

      * **Ejemplos de Preguntas/SQL bien generados:**
      {examples}

      * **Pregunta del Usuario:**
      {prompt}
    variables: ["prompt", "examples", "schema", "date"]
    type: dynamic

  nl_response:
    template: |
      Genera una respuesta que resuma el resultado del DataFrame en función de la pregunta del usuario. 
        * NO menciones la consulta, responde como si fueras un asistente
        * Tampoco hagas cálculos TÚ. Sólamente debes describir los datos presentes, respecto a la pregunta, pero NO sacar totales, promedios, etc.
        * Los precios dalos en $ y con separador de miles ',' 
        * La fecha de hoy es {date}
      
      * **DataFrame:**
      {dataframe}

      * **Consulta que generó el DataFrame:**
      {query}

      * **Pregunta del Usuario:**
      {prompt}
    variables: ["prompt", "dataframe", "query", "date"]
    type: dynamic

  q_type:
    template: |
      Eres el sistema intermedio de un asistente. El usuario puede realizar consultas financieras, principalmente para tareas de descripción. Quiero que determines qué tipo de tarea desea realizar el usuario:
        * description: Quiere conocer datos históricos o existentes; se realiza mediante consultas SQL a tablas existentes
        * prediction: Desea pronosticar datos FUTUROS como ventas, costos, gastos, etc
        * talk: Desea hacer preguntas relacionadas con consultas/respuestas anteriores del asistente; SOLO selecciona esta opción si el usuario no está consultando datos, sino haciendo preguntas simples

      * Devuelve solo un JSON con la estructura {{ "query_type": tipo }} donde tipo puede ser 'description', 'prediction' o 'talk'
      * Ten en cuenta las preguntas anteriores, pues, puede que el usuario esté haciendo una pregunta simple o una consulta de datos, dependiendo de la pregunta o respuesta anterior
      * No des ninguna explicación
      * La fecha de hoy es {date}

      * **Historial de Pregunta/Respuesta anteriores:**
      {history}

      La pregunta del usuario es: {prompt}
    variables: ["prompt", "history", "date"]
    type: dynamic

  talk:
    template: |
      Eres un asistente financiero. Responde a la pregunta del usuario con la siguiente información:

      * Costco es una empresa que se encarga de vender y distribuir diferentes tipos de vehículos; principalmente terrestres, pero también aviones y barcos
      * Tus capacidades y funciones como sistema se basan en responder preguntas sobre datos financieros y contables de la empresa
      * El usuario es un usuario del cargo de mando dentro de la empresa y necesita información valiosa con respecto a la empresa y losa datos a proporcionar o proporcionados
      * Responde de manera concisa a lo que el usuario está preguntando, y limítate a tu conocimiento
      * No des datos/columnas/tablas crudas, por el contrario refrasea para que sea fácil de entender para un usuario sin conocimiento técnico, pero con gran conocimiento de contabilidad y finanzas
      * NO inventes información nunca, si la información no está disponible, declara claramente que no está disponible
      * La fecha de hoy es {date}

      * **Información adicional:**
      {additional_info}

      * **Esquema de tablas en BigQuery:**
      {schema}

      * **Pregunta del Usuario:**
      {prompt}
    variables: ["prompt", "additional_info", "schema", "date"]
    type: dynamic

  forecast_q_generate:
    template: |
      Tengo los siguientes modelos de forecast:
      {models}

      Los cuáles reciben una fecha límite hasta la cuál se desea hacer forecast. El día de hoy es {date}
      Estima la fecha inteligentemente, a pesar de que no siempre esté directamente presente en la pregunta
      Tu respuesta se pasará a otro modelo que podrá responder la pregunta en base a tu respuesta y hacer cálculos como sacar máximos, promedios, etc

      Algunos ejemplos de preguntas pueden ser:
      * Cuál será el mes con mayores ventas este año?
      * Dame los costos estimados de aquí a un año
      * Haz un análisis de las ventas estimadas los próximos 3 meses

      Devuelve solo un JSON con la estructura {{ "model": nombre, "up_date": fecha }} donde nombre es el nombre del modelo y fecha es la fecha hasta la cuál se quiere hacer forecast, EN FORMATO YYYY-MM-DD
      Si el dato que se quiere consultar no es de ninguno de los modelos, retorna el JSON {{ "error": texto_explicando }} con un texto corto explicando que el modelo de predicción no está disponible, y cuáles sí están disponibles

      La pregunta del usuario es: 
      {prompt}
    variables: ["prompt", "date", "models"]
    type: dynamic

  rephrase_q:
    template: |
      Eres un sistema intermedio encargado de reformular preguntas para que sean autocontenidas y directas. Sigue estas reglas:

      * La pregunta debe ser 100% autocontenida, ya que el historial no se pasará al próximo módulo.
      * Reformula ÚNICAMENTE si es necesario. Si la pregunta ya es clara y directa o si es un simple sentencia no dependiente, repítela tal cual
      * Si la pregunta es ambigua o depende de preguntas anteriores, incluye el contexto necesario para que sea entendida sin depender de preguntas previas.
      * La pregunta siempre debe estar dirigida al "asistente financiero", no a la empresa u otra entidad.
      * No respondas ni expliques, solo reformula.

      * **Historial de Pregunta/Respuesta anteriores:**
      {history}

      * **Pregunta del Usuario:**
      {prompt}
    variables: ["prompt", "history"]
    type: dynamic

  filter_ctx:
    template: |
      Eres un sistema intermedio de un agente. Tu misión es filtrar el contexto relevante para responder a la pregunta del usuario.
      * Se te dará un listado indexado de EJEMPLOS de preguntas de las cuales ya se tienen respuestas , y que pueden servir como referencia para dar una respuesta a la pregunta actual
      * Se te dará un listado indexado de COLUMNAS de las tablas de BigQuery, de todo el esquema, y que pueden ser relevantes para responder a la pregunta actual
      * Devuelve un JSON con la estructura {{ "examples": lista de números con los índices de preguntas relevantes, "columns": lista de números con los índices de columnas relevantes, "reason": razon }}
      * Un ejemplo de una respuesta sería {{ "examples": [1, 3, ...], "columns": [2, 4, ...], "reason": "Para responder a..." }}
      * No incluyas todas las preguntas ni todas las columnas, pero tampoco omitas información que podría de alguna forma ser relevante
      * Ten en cuenta que las preguntas de comparación pueden requerir bastantes columnas, mientras otras preguntas no tantas
      * Utiliza el campo "reason" para explicar detalladamente cuál sería el proceso para obtener la respuesta a la pregunta, y de allí al final concluir si es factible o no
      * Piensa paso a paso
      * La fecha de hoy es {date}
      * Considera toda la información disponible, esto es, incluyendo el nivel de granularidad de los datos, la disponibilidad de los datos y la relación entre las tablas

      * **Esquema de tablas en BigQuery:**
      {indexed_schema}

      * **Ejemplos de preguntas gold, las cuales ya sabemos cómo responder:**
      {indexed_examples_qs}

      * **Pregunta del Usuario:**
      {prompt}
    variables: ["prompt", "indexed_examples_qs", "indexed_schema"]
    type: dynamic

  is_feasible:
    template: |
      Dada la pregunta del usuario y toda la información contextual disponible, determina si la pregunta es factible de responder con los datos disponibles en las tablas de BigQuery. 
      * Devuelve un JSON con la estructura {{ "feasible": boolean, "reason": razon }}
        * boolean es True si la pregunta es factible y False si no lo es
        * Utiliza el campo "reason" para explicar detalladamente cuál sería el proceso para obtener la respuesta a la pregunta, y de allí al final concluir si es factible o no, en UN ÚNICO PARRAFO
        * No debes hacer la consulta SQL, únicamente dar un razonamiento lógico muy bien fundamentado
      * Piensa paso a paso
      * La fecha de hoy es {date}
      * Considera toda la información disponible, esto es, incluyendo el nivel de granularidad de los datos, la disponibilidad de los datos y la relación entre las tablas
      * Únicamente marca como infactible si no hay manera de responder la pregunta con los datos disponibles
      * Por ejemplo, si la pregunta parece ser manejable por un llm normal, aunque no tenga que ver con finanzas, es factible
      * NO retornes consultas SQL, llamados o otros tecnicismos. Únicamente un razonamiento lógico en lenguaje natural
      * Hay 2 tipos de preguntas: description y prediction. Esta pregunta es de tipo {q_type}
      * Para este tipo de pregunta ten en cuenta el siguiente contexto:

      {context}

      * **Historial de Pregunta/Respuesta anteriores:**
      {history}

      * **Modelo de Forecast:**
      {models}

      * **Pregunta del Usuario:**
      {prompt}
    variables: ["prompt", "context", "history", "q_type", "date", "models"]
    type: dynamic

  models:
    template: |
      * predicción de ventas: sales_model
      * predicción de costos: costs_model
    type: static

  additional_info:
    template: |
      * Para los datos predictivos, se utilizó una estimación por medio de un modelo ARIMA (Modelo autorregresivo integrado de media móvil) entrenado con los datos históricos
      * Para las consultas descriptivas, se genera y realiza una consulta SQL sobre la base de datos de la empresa
      * Las preguntas de conversación pueden ser simples preguntas como "Hola", "Describe los datos que tienes", "Cómo puedo dividir las ventas por ubicación?"
      * O también pueden ser preguntas relacionadas con respuestas anteriores, como: 
        * "Por qué la predicción de ventas es tan baja?" (siempre y cuando la pregunta anterior haya sido una predicción de ventas)
        * "Compara estos resultados" (considerando las preguntas/respuestas dadas anteriormente)
    type: static
